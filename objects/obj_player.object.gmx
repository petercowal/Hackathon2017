<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_temp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_id = 0;

aim_power = 0;
max_aim_power = 100;
aim_direction = 0;
am_dashing = false;
dash_cool = 0;
dash_length = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>aiming</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//stores data from gamepad
var aim_axis_h = gamepad_axis_value(gamepad_id, gp_axisrh);
var aim_axis_v = gamepad_axis_value(gamepad_id, gp_axisrv);

var magnitude = sqrt(sqr(aim_axis_h) + sqr(aim_axis_v));
if (magnitude &gt; 0.5) {
    aim_direction = arctan2(-aim_axis_v, aim_axis_h) * 180/pi;
    if (aim_power &gt; 10 &amp;&amp; gamepad_button_check_released(gamepad_id, gp_shoulderrb)) {
        var arrow = instance_create(x, y, obj_arrow);
        arrow.direction = aim_direction;
        arrow.image_angle = aim_direction;
        arrow.speed = 10 + aim_power / 4;
        aim_power = 1;
    }
    if (gamepad_button_check(gamepad_id, gp_shoulderrb)) {
        aim_power = min(max_aim_power, aim_power + 1);
    } else {
        aim_power = 1;
    }
    

    
} else {
    aim_power = 0;
}

//this controls the maximum movement speed
if (aim_power &gt; 0) {
    move_speed = max(7 - aim_power / 10, 3);
} else {
    move_speed = 10;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gamepad_button_check_pressed(0,gp_shoulderlb) &amp;&amp; dash_cool = 0){
am_dashing = true;
dash_cool += 60;
dash_length += 10;
}

if(am_dashing){
    speed = move_speed*2;
    direction = aim_direction;
} else{
//stores data from gamepad
var move_axis_h = gamepad_axis_value(gamepad_id, gp_axislh);
var move_axis_v = gamepad_axis_value(gamepad_id, gp_axislv);

//checks to see if joystick is sufficiently far from center
var magnitude = sqrt(sqr(move_axis_h) + sqr(move_axis_v));
if (magnitude &lt; 0.5) {
    hspeed = 0;
    vspeed = 0;
} else {
    //caps velocity at move_speed
    var scale = min(1, 1/magnitude);
    hspeed = move_speed * move_axis_h * scale;
    vspeed = move_speed * move_axis_v * scale;
    if (aim_power == 0) {
        aim_direction = direction;
        }
    }
}
//angle sweeps: slide along walls
var angle_sweep_size = 80;

if (place_meeting(x + hspeed, y + vspeed, obj_wall)) {
    var old_direction = direction;
    for (var angle = 0; angle &lt;= angle_sweep_size; angle += 5) {
        if (!place_meeting(x + speed * cos(angle * pi/180) * cos((direction + angle)*pi/180), 
                            y - speed * cos(angle * pi/180) * sin((direction + angle)*pi/180), 
                            obj_wall)) {
            direction += angle;
            speed *= cos(angle * pi/180);
            break;
        } else if (!place_meeting(x + speed * cos(angle * pi/180) * cos((direction - angle)*pi/180), 
                            y - speed * cos(angle * pi/180) * sin((direction - angle)*pi/180), 
                            obj_wall)) {
            direction -= angle;
            speed *= cos(angle * pi/180)
            break;
        }
    }
    if (direction == old_direction) speed = 0;
}

if(dash_length&gt;0){
dash_length--;
} else{
am_dashing=false;
}

if(dash_cool &gt; 0){
dash_cool--;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Melee</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (aim_power == 0 &amp;&amp; gamepad_button_check_pressed(0, gp_shoulderrb)){
    var inst;
    inst = instance_create(x, y, obj_slash);
    inst.direction = aim_direction;
    inst.image_angle = aim_direction;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (aim_power &gt; 0 &amp;&amp; sin(aim_direction * pi/180) &gt; 0) {
    draw_sprite_ext(spr_bow_temp, -1, x, y, 1 + aim_power/300, 1 - aim_power/300, aim_direction, c_white, 1);
}

draw_self();
if (aim_power &gt; 0 &amp;&amp; sin(aim_direction * pi/180) &lt;= 0) {
    draw_sprite_ext(spr_bow_temp, -1, x, y, 1 + aim_power/300, 1 - aim_power/300, aim_direction, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
