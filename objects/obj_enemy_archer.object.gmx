<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_raccoonfox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy</parentName>
  <maskName>spr_raccoonfox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
myHealth = 5;

state = 0;
state_timer = 0;
target_x = x;
target_y = y;

arrows = 2;

animation_timer = 0;

bow_direction = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; arrows; i++) {
    var iii = instance_create(x, y, obj_arrow_ground);
    iii.speed = random(4);
    iii.direction = random(360);
    iii.image_angle = random(360);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>archer ai</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_player)
{
    var inst;
    
    if (arrows &lt;= 0 &amp;&amp; instance_exists(obj_arrow_ground)) {
        inst = instance_nearest(x, y, obj_arrow_ground)
        mp_potential_step_object(inst.x, inst.y, 4, obj_enemy_collider);
        state = 0;
        target_x = inst.x;
        target_y = inst.y;
    } else {
        inst = instance_nearest(x, y, obj_player);
        if (collision_line(x, y, inst.x, inst.y, obj_wall, true, true)) {
            mp_potential_step_object(inst.x, inst.y, 4, obj_enemy_collider);
            state = 0;
        } else {
            if (state == 0) {
                if (distance_to_object(inst) &lt; 200) {
                    mp_potential_step_object(inst.x, inst.y, -4, obj_enemy_collider);
                } else if (distance_to_object(inst) &gt; 400) {
                    mp_potential_step_object(target_x, target_y, 4, obj_enemy_collider);
                    
                }
                if (state_timer &lt;= 0) {
                    state_timer = 50;
                    state = 1;
                } else {
                    state_timer --;
                }
            }
            if (state == 1) {
                if (state_timer &gt; 10) {
                    move_towards_point(obj_player.x + obj_player.hspeed * 5, obj_player.y + obj_player.vspeed * 5, 0);
                }
                state_timer --;
                if (state_timer &lt;= 0) {
                    arrows --;
                    var arrow = instance_create(x, y, obj_enemy_arrow);
                    arrow.direction = direction;
                    arrow.speed = 20;
                    arrow.vspeed -= 3;
                    state_timer = 50;
                    state = 0;
                }
            }
        }
    }    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_arrow_ground">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other) do {
    instance_destroy();
}

arrows ++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>animation_timer ++;
if (animation_timer &gt;= 10) {
    animation_timer = 0;
    if (sin(direction * pi/180) &lt; 0){
        image_index = 1;
        //bow_direction = -45;
    }
    else{ 
        image_index = 0;
        //bow_direction = 45;
    }
    
    if (cos(direction * pi/180) &lt; 0){
        image_xscale = -1;
        bow_direction = 200;
    }
    else{
        image_xscale = 1;
        bow_direction = -20;
     }
}

if (state == 1) bow_direction = direction;

var sine = -sin(bow_direction * pi / 180);
var cosine = cos(bow_direction * pi / 180);

if (sine &lt; 0) {
    if (cosine &lt; 0)
        draw_sprite_ext(spr_raccoonbow, -1, x, y, 1, 1, bow_direction, c_white, 1);
    else
        draw_sprite_ext(spr_raccoonbow, -1, x, y, 1, -1, bow_direction, c_white, 1);
}

image_speed = 0;

draw_self();

if (sine &gt;= 0) {
    if (cosine &lt; 0)
        draw_sprite_ext(spr_raccoonbow, -1, x, y, 1, 1, bow_direction, c_white, 1);
    else
        draw_sprite_ext(spr_raccoonbow, -1, x, y, 1, -1, bow_direction, c_white, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
